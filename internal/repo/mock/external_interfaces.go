// Code generated by MockGen. DO NOT EDIT.
// Source: ../interface.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// GetModTime mocks base method.
func (m *MockFile) GetModTime(zipName string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModTime", zipName)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModTime indicates an expected call of GetModTime.
func (mr *MockFileMockRecorder) GetModTime(zipName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModTime", reflect.TypeOf((*MockFile)(nil).GetModTime), zipName)
}

// ReadByChunks mocks base method.
func (m *MockFile) ReadByChunks(zipName string, w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByChunks", zipName, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadByChunks indicates an expected call of ReadByChunks.
func (mr *MockFileMockRecorder) ReadByChunks(zipName, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByChunks", reflect.TypeOf((*MockFile)(nil).ReadByChunks), zipName, w)
}

// WriteByChunks mocks base method.
func (m *MockFile) WriteByChunks(zipName string, r io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteByChunks", zipName, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteByChunks indicates an expected call of WriteByChunks.
func (mr *MockFileMockRecorder) WriteByChunks(zipName, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByChunks", reflect.TypeOf((*MockFile)(nil).WriteByChunks), zipName, r)
}
