// Code generated by MockGen. DO NOT EDIT.
// Source: ../../interface/repo_zip_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	entity "github.com/AnnV0lokitina/diplom1/cmd/gophkeeper/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockRepoZip is a mock of RepoZip interface.
type MockRepoZip struct {
	ctrl     *gomock.Controller
	recorder *MockRepoZipMockRecorder
}

// MockRepoZipMockRecorder is the mock recorder for MockRepoZip.
type MockRepoZipMockRecorder struct {
	mock *MockRepoZip
}

// NewMockRepoZip creates a new mock instance.
func NewMockRepoZip(ctrl *gomock.Controller) *MockRepoZip {
	mock := &MockRepoZip{ctrl: ctrl}
	mock.recorder = &MockRepoZipMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoZip) EXPECT() *MockRepoZipMockRecorder {
	return m.recorder
}

// CreateZIP mocks base method.
func (m *MockRepoZip) CreateZIP() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateZIP")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateZIP indicates an expected call of CreateZIP.
func (mr *MockRepoZipMockRecorder) CreateZIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateZIP", reflect.TypeOf((*MockRepoZip)(nil).CreateZIP))
}

// GetInfo mocks base method.
func (m *MockRepoZip) GetInfo() (*entity.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo")
	ret0, _ := ret[0].(*entity.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockRepoZipMockRecorder) GetInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockRepoZip)(nil).GetInfo))
}

// ReadFileByChunks mocks base method.
func (m *MockRepoZip) ReadFileByChunks(w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFileByChunks", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadFileByChunks indicates an expected call of ReadFileByChunks.
func (mr *MockRepoZipMockRecorder) ReadFileByChunks(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFileByChunks", reflect.TypeOf((*MockRepoZip)(nil).ReadFileByChunks), w)
}

// UnpackZIP mocks base method.
func (m *MockRepoZip) UnpackZIP() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpackZIP")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpackZIP indicates an expected call of UnpackZIP.
func (mr *MockRepoZipMockRecorder) UnpackZIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpackZIP", reflect.TypeOf((*MockRepoZip)(nil).UnpackZIP))
}

// WriteFileByChunks mocks base method.
func (m *MockRepoZip) WriteFileByChunks(reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFileByChunks", reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFileByChunks indicates an expected call of WriteFileByChunks.
func (mr *MockRepoZipMockRecorder) WriteFileByChunks(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFileByChunks", reflect.TypeOf((*MockRepoZip)(nil).WriteFileByChunks), reader)
}
