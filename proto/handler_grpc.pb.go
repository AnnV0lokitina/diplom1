// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/handler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecureStorageClient is the client API for SecureStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecureStorageClient interface {
	Register(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*TextResponse, error)
	Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*TextResponse, error)
	SendFile(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (SecureStorage_SendFileClient, error)
	GetFile(ctx context.Context, opts ...grpc.CallOption) (SecureStorage_GetFileClient, error)
}

type secureStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewSecureStorageClient(cc grpc.ClientConnInterface) SecureStorageClient {
	return &secureStorageClient{cc}
}

func (c *secureStorageClient) Register(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, "/proto.SecureStorage/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureStorageClient) Login(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, "/proto.SecureStorage/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureStorageClient) SendFile(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (SecureStorage_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecureStorage_ServiceDesc.Streams[0], "/proto.SecureStorage/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &secureStorageSendFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecureStorage_SendFileClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type secureStorageSendFileClient struct {
	grpc.ClientStream
}

func (x *secureStorageSendFileClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *secureStorageClient) GetFile(ctx context.Context, opts ...grpc.CallOption) (SecureStorage_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SecureStorage_ServiceDesc.Streams[1], "/proto.SecureStorage/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &secureStorageGetFileClient{stream}
	return x, nil
}

type SecureStorage_GetFileClient interface {
	Send(*File) error
	CloseAndRecv() (*TextResponse, error)
	grpc.ClientStream
}

type secureStorageGetFileClient struct {
	grpc.ClientStream
}

func (x *secureStorageGetFileClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *secureStorageGetFileClient) CloseAndRecv() (*TextResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SecureStorageServer is the server API for SecureStorage service.
// All implementations must embed UnimplementedSecureStorageServer
// for forward compatibility
type SecureStorageServer interface {
	Register(context.Context, *UserRequest) (*TextResponse, error)
	Login(context.Context, *UserRequest) (*TextResponse, error)
	SendFile(*UserRequest, SecureStorage_SendFileServer) error
	GetFile(SecureStorage_GetFileServer) error
	mustEmbedUnimplementedSecureStorageServer()
}

// UnimplementedSecureStorageServer must be embedded to have forward compatible implementations.
type UnimplementedSecureStorageServer struct {
}

func (UnimplementedSecureStorageServer) Register(context.Context, *UserRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSecureStorageServer) Login(context.Context, *UserRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSecureStorageServer) SendFile(*UserRequest, SecureStorage_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedSecureStorageServer) GetFile(SecureStorage_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedSecureStorageServer) mustEmbedUnimplementedSecureStorageServer() {}

// UnsafeSecureStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecureStorageServer will
// result in compilation errors.
type UnsafeSecureStorageServer interface {
	mustEmbedUnimplementedSecureStorageServer()
}

func RegisterSecureStorageServer(s grpc.ServiceRegistrar, srv SecureStorageServer) {
	s.RegisterService(&SecureStorage_ServiceDesc, srv)
}

func _SecureStorage_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureStorageServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecureStorage/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureStorageServer).Register(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureStorage_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureStorageServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SecureStorage/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureStorageServer).Login(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureStorage_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecureStorageServer).SendFile(m, &secureStorageSendFileServer{stream})
}

type SecureStorage_SendFileServer interface {
	Send(*File) error
	grpc.ServerStream
}

type secureStorageSendFileServer struct {
	grpc.ServerStream
}

func (x *secureStorageSendFileServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _SecureStorage_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SecureStorageServer).GetFile(&secureStorageGetFileServer{stream})
}

type SecureStorage_GetFileServer interface {
	SendAndClose(*TextResponse) error
	Recv() (*File, error)
	grpc.ServerStream
}

type secureStorageGetFileServer struct {
	grpc.ServerStream
}

func (x *secureStorageGetFileServer) SendAndClose(m *TextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *secureStorageGetFileServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SecureStorage_ServiceDesc is the grpc.ServiceDesc for SecureStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecureStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SecureStorage",
	HandlerType: (*SecureStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _SecureStorage_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _SecureStorage_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _SecureStorage_SendFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _SecureStorage_GetFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/handler.proto",
}
